
services:
  # --------------------------------------------------------------------------
  # 1) Infisical Backend (API & Interface Web)
  # --------------------------------------------------------------------------
  backend:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    image: infisical/infisical:latest-postgres
    pull_policy: always

    # Charge toutes les variables depuis le fichier .env
    env_file: .env

    # On force simplement NODE_ENV en production ici
    environment:
      - NODE_ENV=production

    ports:
      - "8080:8080"

    networks:
      - traefik
      - infisical

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.infisical.rule=Host(`infisical.jeremiealcaraz.com`)"
      - "traefik.http.routers.infisical.entrypoints=websecure"
      - "traefik.http.routers.infisical.tls.certresolver=mytlschallenge"
      - "traefik.http.services.infisical.loadbalancer.server.port=8080"

  # --------------------------------------------------------------------------
  # 2) Redis (Cache pour Infisical)
  # --------------------------------------------------------------------------
  redis:
    image: redis
    container_name: infisical-redis
    restart: always
    
    # Charge également le .env (si jamais vous voulez y définir d'autres variables pour Redis)
    env_file: .env
    
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

    networks:
      - infisical

    volumes:
      - redis_data:/data

  # --------------------------------------------------------------------------
  # 3) Base de Données PostgreSQL
  # --------------------------------------------------------------------------
  db:
    container_name: infisical-db
    image: postgres:14-alpine
    restart: always

    # Charge les variables POSTGRES_... depuis .env
    env_file: .env

    volumes:
      - pg_data:/var/lib/postgresql/data

    networks:
      - infisical

    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

# --------------------------------------------------------------------------
# 4) Définition des Volumes (Persistance des données)
# --------------------------------------------------------------------------
volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

# --------------------------------------------------------------------------
# 5) Définition des Réseaux
# --------------------------------------------------------------------------
networks:
  traefik:
    external: true
  infisical:
    driver: bridge
