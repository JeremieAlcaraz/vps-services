services:
  backend:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    image: infisical/infisical:latest-postgres
    pull_policy: always
    env_file:
      - ../stack.env
    # Port mapping facultatif (pour un accès direct en dehors de Traefik)
    ports:
      - "91:8080"
    networks:
      - traefik
      - infisical
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"    # Ajouté pour forcer l'utilisation du réseau traefik
      - "traefik.http.routers.infisical.rule=Host(`infisical.jeremiealcaraz.com`)"
      - "traefik.http.routers.infisical.entrypoints=websecure"
      - "traefik.http.routers.infisical.tls.certresolver=mytlschallenge"
      - "traefik.http.services.infisical.loadbalancer.server.port=8080"

  redis:
    image: redis
    container_name: infisical-dev-redis
    restart: always
    env_file:
      - ../stack.env
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - infisical
    volumes:
      - redis_data:/data

  db:
    container_name: infisical-db
    image: postgres:14-alpine
    restart: always
    env_file:
      - ../stack.env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - infisical
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

networks:
  traefik:
    external: true
  infisical:
